// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int     @id @default(autoincrement())
  name                 String
  surname              String
  email                String  @unique
  password             String
  role                 String  @default("customer")
  activation_link      String  @default("")
  hashed_refresh_token String  @default("")
  is_active            Boolean @default(false)

  customer Customers[]

  staffs Staffs[]

  @@map("users")
}

model Customers {
  id          Int    @id @default(autoincrement())
  user_id    Int    @unique 
  phone       String
  birthday    String
  expiry_date String
  passport_no String

  User User? @relation(fields: [user_id], references: [id])

  booking         Bookings[]
  loyalty_clients Loyalty_clients[]
  reviews         Reviews[]

  @@map("customers")
}

model Staffs {
  id                   Int     @id @default(autoincrement())
  staff_role_id        Int
  hotel_id             Int
  user_id              Int     @unique
  is_verified_by_admin Boolean @default(false)

  User        User?        @relation(fields: [user_id], references: [id])
  Staff_roles Staff_roles? @relation(fields: [staff_role_id], references: [id])
  Hotels      Hotels?      @relation(fields: [hotel_id], references: [id])

  @@map("staffs")
}

model Staff_roles {
  id   Int    @id @default(autoincrement())
  name String @unique

  staffs Staffs[]

  @@map("staff_roles")
}

model Admin {
  id                         Int     @id @default(autoincrement())
  full_name                  String
  email                      String  @unique
  password                   String
  hashed_refresh_token_admin String  @default("")
  role                       String  @default("admin")
  is_creator                 Boolean @default(false)

  @@map("admins")
}

model Hotels {
  id       Int    @id @default(autoincrement())
  name     String
  address  String
  city     String
  location String

  staffs          Staffs[]
  hotel_amenities Hotel_amenities[]
  rooms           Rooms[]

  @@map("hotels")
}

model Hotel_amenities {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  hotel_id Int
  Hotels   Hotels? @relation(fields: [hotel_id], references: [id])

  @@map("hotel_amenities")
}

model Rooms {
  id           Int     @id @default(autoincrement())
  room_type_id Int
  hotel_id     Int
  room_number  String  @unique
  price        Int
  is_available Boolean @default(false)

  minibar    Minibar[]
  bookings   Bookings[]
  Hotels     Hotels?     @relation(fields: [hotel_id], references: [id])
  Room_types Room_types? @relation(fields: [room_type_id], references: [id])

  @@map("rooms")
}

model Room_types {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  capacity      Int
  room_amenties Room_amenties[]
  rooms         Rooms[]
  discounts     Discounts[]

  @@map("room_types")
}

model Room_amenties {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  room_type_id Int
  Room_types   Room_types? @relation(fields: [room_type_id], references: [id])

  @@map("room_amenties")
}

model Discounts {
  id               Int         @id @default(autoincrement())
  title            String
  description      String
  discount_percent Int
  start_date       DateTime
  end_date         DateTime
  room_type_id     Int
  Room_types       Room_types? @relation(fields: [room_type_id], references: [id])

  @@map("discounts")
}

model Minibar {
  id             Int    @id @default(autoincrement())
  item_name      String
  room_id        Int
  quantity       Int
  price_per_item Int
  Rooms          Rooms? @relation(fields: [room_id], references: [id])

  @@map("minibar")
}

model Reviews {
  id          Int      @id @default(autoincrement())
  hotel_id    Int
  customer_id Int
  rating      Int
  description String
  created_at  DateTime @default(now())

  Customers Customers? @relation(fields: [customer_id], references: [id])

  @@map("reviews")
}

model Bookings {
  id            Int      @id @default(autoincrement())
  room_id       Int
  customer_id   Int
  checkin_date  String
  checkout_date String
  status        String

  payments         Payments[]
  booking_services Booking_service[]

  Customers Customers? @relation(fields: [customer_id], references: [id])
  Rooms     Rooms?     @relation(fields: [room_id], references: [id])

  @@map("bookings")
}

model Payments {
  id         Int       @id @default(autoincrement())
  booking_id Int
  amount     Int
  method     String
  status     String
  Bookings   Bookings? @relation(fields: [booking_id], references: [id])

  @@map("payments")
}

model Booking_service {
  id         Int       @id @default(autoincrement())
  booking_id Int
  service_id Int
  Bookings   Bookings? @relation(fields: [booking_id], references: [id])
  Services   Services? @relation(fields: [service_id], references: [id])

  @@map("booking_services")
}

model Services {
  id    Int    @id @default(autoincrement())
  name  String
  price Int

  booking_services Booking_service[]

  @@map("services")
}

model Loyalty_clients {
  id          Int        @id @default(autoincrement())
  customer_id Int
  points      Int
  level       String
  Customers   Customers? @relation(fields: [customer_id], references: [id])

  @@map("loyalty_clients")
}
